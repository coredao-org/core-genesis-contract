// SPDX-License-Identifier: Apache2.0
pragma solidity 0.8.4;

import "./interface/IRelayerHub.sol";

contract System {

  bool public alreadyInit;

{% if mock %}
  address public VALIDATOR_CONTRACT_ADDR;
  address public SLASH_CONTRACT_ADDR;
  address public SYSTEM_REWARD_ADDR;
  address public LIGHT_CLIENT_ADDR;
  address public RELAYER_HUB_ADDR;
  address public CANDIDATE_HUB_ADDR;
  address public GOV_HUB_ADDR;
  address public PLEDGE_AGENT_ADDR;
  address public BURN_ADDR;
  address public FOUNDATION_ADDR;
  address public STAKE_HUB_ADDR;
  address public BTC_STAKE_ADDR;
  address public BTC_AGENT_ADDR;
  address public BTCLST_STAKE_ADDR;
  address public CORE_AGENT_ADDR;
  address public HASH_AGENT_ADDR;
  address public BTCLST_TOKEN_ADDR;

  struct SystemContractAddr {
    address validator;
    address slash;
    address systemReward;
    address lightClient;
    address relayerHub;
    address candidateHub;
    address govHub;
    address pledgeAgent;
    address burn;
    address foundation;
    address stakeHub;
    address btcStake;
    address btcAgent;
    address btcLSTStake;
    address coreAgent;
    address hashAgent;
    address btcLstToken;
  }

  function updateContractAddr(bytes memory _systemContractAddr) external {
    SystemContractAddr memory systemContractAddr = abi.decode(_systemContractAddr, (SystemContractAddr));
    VALIDATOR_CONTRACT_ADDR = systemContractAddr.validator;
    SLASH_CONTRACT_ADDR = systemContractAddr.slash;
    SYSTEM_REWARD_ADDR = systemContractAddr.systemReward;
    LIGHT_CLIENT_ADDR = systemContractAddr.lightClient;
    RELAYER_HUB_ADDR = systemContractAddr.relayerHub;
    CANDIDATE_HUB_ADDR = systemContractAddr.candidateHub;
    GOV_HUB_ADDR = systemContractAddr.govHub;
    PLEDGE_AGENT_ADDR = systemContractAddr.pledgeAgent;
    BURN_ADDR = systemContractAddr.burn;
    FOUNDATION_ADDR = systemContractAddr.foundation;
    STAKE_HUB_ADDR = systemContractAddr.stakeHub;
    BTC_STAKE_ADDR = systemContractAddr.btcStake;
    BTC_AGENT_ADDR = systemContractAddr.btcAgent;
    BTCLST_STAKE_ADDR = systemContractAddr.btcLSTStake;
    CORE_AGENT_ADDR = systemContractAddr.coreAgent;
    HASH_AGENT_ADDR = systemContractAddr.hashAgent;
    BTCLST_TOKEN_ADDR = systemContractAddr.btcLstToken;
  }
  {% else %}
  address public constant VALIDATOR_CONTRACT_ADDR = 0x0000000000000000000000000000000000001000;
  address public constant SLASH_CONTRACT_ADDR = 0x0000000000000000000000000000000000001001;
  address public constant SYSTEM_REWARD_ADDR = 0x0000000000000000000000000000000000001002;
  address public constant LIGHT_CLIENT_ADDR = 0x0000000000000000000000000000000000001003;
  address public constant RELAYER_HUB_ADDR = 0x0000000000000000000000000000000000001004;
  address public constant CANDIDATE_HUB_ADDR = 0x0000000000000000000000000000000000001005;
  address public constant GOV_HUB_ADDR = 0x0000000000000000000000000000000000001006;
  address public constant PLEDGE_AGENT_ADDR = 0x0000000000000000000000000000000000001007;
  address public constant BURN_ADDR = 0x0000000000000000000000000000000000001008;
  address public constant FOUNDATION_ADDR = 0x0000000000000000000000000000000000001009;
  address public constant STAKE_HUB_ADDR = 0x0000000000000000000000000000000000001010;

  address public constant CORE_AGENT_ADDR = 0x0000000000000000000000000000000000001011;
  address public constant HASH_AGENT_ADDR = 0x0000000000000000000000000000000000001012;
  address public constant BTC_AGENT_ADDR = 0x0000000000000000000000000000000000001013;
  address public constant BTC_STAKE_ADDR = 0x0000000000000000000000000000000000001014;
  address public constant BTCLST_STAKE_ADDR = 0x0000000000000000000000000000000000001015;
  address public constant BTCLST_TOKEN_ADDR = 0x0000000000000000000000000000000000010001;
{% endif %}
  modifier onlyCoinbase() {
  {% if not mock %}
    require(msg.sender == block.coinbase, "the message sender must be the block producer");
  {% endif %}
    _;
  }

  modifier onlyZeroGasPrice() {
    {% if not mock %}
    require(tx.gasprice == 0 , "gasprice is not zero");
    {% endif %}
    _;
  }

  modifier onlyNotInit() {
    require(!alreadyInit, "the contract already init");
    _;
  }

  modifier onlyInit() {
    require(alreadyInit, "the contract not init yet");
    _;
  }

  modifier onlySlash() {
    require(msg.sender == SLASH_CONTRACT_ADDR, "the msg sender must be slash contract");
    _;
  }

  modifier onlyGov() {
    require(msg.sender == GOV_HUB_ADDR, "the msg sender must be governance contract");
    _;
  }

  modifier onlyCandidate() {
    require(msg.sender == CANDIDATE_HUB_ADDR, "the msg sender must be candidate contract");
    _;
  }

  modifier onlyValidator() {
    require(msg.sender == VALIDATOR_CONTRACT_ADDR, "the msg sender must be validatorSet contract");
    _;
  }

  modifier onlyRelayer() {
    require(IRelayerHub(RELAYER_HUB_ADDR).isRelayer(msg.sender), "the msg sender is not a relayer");
    _;
  }

  modifier onlyStakeHub() {
    require(msg.sender == STAKE_HUB_ADDR, "the msg sender must be stake hub contract");
    _;
  }

  modifier onlyBtcStake() {
    require(msg.sender == BTC_STAKE_ADDR, "the msg sender must be bitcoin stake contract");
    _;
  }

  modifier onlyBtcAgent() {
    require(msg.sender == BTC_AGENT_ADDR, "the msg sender must be bitcoin agent contract");
    _;
  }

  /// The length of param mismatch. Default is 32 bytes.
  /// @param name the name of param.
  error MismatchParamLength(string name);

  /// The passed in param is out of bound. Should be in range [`lowerBound`,
  /// `upperBound`] but the value is `given`.
  /// @param name the name of param.
  /// @param given the value of param.
  /// @param lowerBound requested lower bound of the param.
  /// @param upperBound requested upper bound of the param
  error OutOfBounds(string name, uint256 given, uint256 lowerBound, uint256 upperBound);
}
