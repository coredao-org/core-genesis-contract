import pytest
import brownie
from web3 import Web3
from eth_abi import encode
from brownie import *
from .utils import expect_event, padding_left, random_address
from .common import execute_proposal


@pytest.fixture(scope="module", autouse=True)
def set_up(slash_indicator):
    hex_value = padding_left(Web3.to_hex(150), 64)
    execute_proposal(
        slash_indicator.address,
        0,
        "updateParam(string,bytes)",
        encode(['string', 'bytes'], ['felonyThreshold', Web3.to_bytes(hexstr=hex_value)]),
        "update felonyThreshold"
    )


def test_slash(slash_indicator, validator_set):
    for slash_address, times, count in (
            (random_address(), 1, 1),
            (random_address(), slash_indicator.felonyThreshold(), 0)
    ):
        validator_set.setValidatorSetMap(slash_address)
        for _ in range(times):
            tx = slash_indicator.slash(slash_address)
            expect_event(tx, "validatorSlashed", {'validator': slash_address})
        result = slash_indicator.getSlashIndicator(slash_address)
        assert result[1] == count


def test_double_sign_slash(slash_indicator, candidate_hub):
    tests = [(
        accounts[0],
        "0xf9025aa0a5590a3b8d6297b716b35d943cb36c4554d09a312b7b82dd77760fec347f3a83a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479401bca3615d24d3c638836691517b2b9b49b054b1a0c3df286f72593c7897cd3354a07b405615b7d1067499eb98fa2cad2e5cd0cf6ea07f35ff816e77f5692164d1500f092a63003538d0ffe9b737121f7eaf4b1b32eda07f9af29628d2dea2ff343d4330b9b3a058bcaebf3dfc218d97a96afc36ab43a6bff7a7831d771d8462a833a6b861da83010000846765746889676f312e31352e31348664617277696e00884e571ae213ec5e5bbfd7c03675fb69d4d2874caaa016d9e388d8d09d34a7aa6a53a9802a9e933f3e3c1967f1190089969076a9bea1efbfa432b5aa8c7aa9189ea80c0200a00000000000000000000000000000000000000000000000000000000000000000880000000000000000",
        "0xf9025aa0a5590a3b8d6297b716b35d943cb36c4554d09a312b7b82dd77760fec347f3a83a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479401bca3615d24d3c638836691517b2b9b49b054b1a0c3df286f72593c7897cd3354a07b405615b7d1067499eb98fa2cad2e5cd0cf6ea07f35ff816e77f5692164d1500f092a63003538d0ffe9b737121f7eaf4b1b32eda07f9af29628d2dea2ff343d4330b9b3a058bcaebf3dfc218d97a96afc36ab43a6bff7a7831d771d8462a836bbb861da83010000846765746889676f312e31352e31348664617277696e00884e571a468503e2be73d187f1eb0289400ae93aec279739a679a72658c4a29e9cf2b2e86633f956022aaac8315dcd6a3fedd4a8aca169dd2c94b94d918a2c9343a19fac00a00000000000000000000000000000000000000000000000000000000000000000880000000000000000",
        True,
        ""
    ), ]
    candidate_hub.registerMock(
        "0x01Bca3615D24d3c638836691517b2B9b49b054B1",
        "0x01Bca3615D24d3c638836691517b2B9b49b054B1",
        "0x01Bca3615D24d3c638836691517b2B9b49b054B1",
        100
    )
    for operate_address, header1, header2, ret, err in tests:
        if ret:
            tx = slash_indicator.doubleSignSlash(header1, header2, {'from': operate_address, 'value': 0})
            expect_event(tx, "rewardEmpty")
        else:
            with brownie.reverts(err):
                slash_indicator.doubleSignSlash(header1, header2, {'from': operate_address, 'value': 0})


def test_parse_header(slash_indicator):
    tests = [(
        "0xf9025aa0a5590a3b8d6297b716b35d943cb36c4554d09a312b7b82dd77760fec347f3a83a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479401bca3615d24d3c638836691517b2b9b49b054b1a0c3df286f72593c7897cd3354a07b405615b7d1067499eb98fa2cad2e5cd0cf6ea07f35ff816e77f5692164d1500f092a63003538d0ffe9b737121f7eaf4b1b32eda07f9af29628d2dea2ff343d4330b9b3a058bcaebf3dfc218d97a96afc36ab43a6bff7a7831d771d8462a979d1b861da83010000846765746889676f312e31352e31348664617277696e00884e571a2eccf960ed12bea02b45d860602b3edbc81d621f60c3cac6f782d93057084ac211ee448ed6a69e355f8dd68a2611f94924a25a864dd2a4cd8aa17debbf8c1c0201a00000000000000000000000000000000000000000000000000000000000000000880000000000000000",
        "0xce4b26f51b1c6b10bc4c9694ab175e05f328be77204b050a30d3f0c830b36c8e",
        "0x01Bca3615D24d3c638836691517b2B9b49b054B1"
    ), (
        "0xf9025aa0a5590a3b8d6297b716b35d943cb36c4554d09a312b7b82dd77760fec347f3a83a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479401bca3615d24d3c638836691517b2b9b49b054b1a0c3df286f72593c7897cd3354a07b405615b7d1067499eb98fa2cad2e5cd0cf6ea07f35ff816e77f5692164d1500f092a63003538d0ffe9b737121f7eaf4b1b32eda07f9af29628d2dea2ff343d4330b9b3a058bcaebf3dfc218d97a96afc36ab43a6bff7a7831d771d8462a9812ab861da83010000846765746889676f312e31352e31348664617277696e00884e571a08da1339177b6bbe119f3007ee576b00e4c37a0041c9dc8c3a79d6a72977448b3a518d9c4d04b3cf73996d493dcdab46783aa06a2d7b28515c78917adead402020a00000000000000000000000000000000000000000000000000000000000000000880000000000000000",
        "0xb195a130cca4c6ece8a7894b215d5b3e2505c6fe5f1dca177b98215c951469e6",
        "0x0000000000000000000000000000000000000000"
    )]

    for header, _hash, validator in tests:
        data = slash_indicator.parseHeader(header)
        assert data[0] == _hash
        assert data[1] == validator


def test_clean(slash_indicator, candidate_hub):
    tests = [(
        accounts[0], [], [], [], [], 0
    ), (
        accounts[0], [accounts[0]], [38], [accounts[0]], [1], 1
    ), (
        accounts[0], [accounts[0]], [37], [], [], 0
    ), (
        accounts[0], accounts[:2], [38, 37], [accounts[0]], [1], 1
    ), (
        accounts[0], accounts[:2], [37, 38], [accounts[1]], [1], 1
    ), (
        accounts[0], accounts[:2], [37, 37], [], [], 0
    ), (
        accounts[0], accounts[:3], [38, 37, 39], [accounts[2], accounts[0]], [2, 1], 2
    )]

    for operator_address, validators, counts, cleaned_validator, cleaned_counts, cleaned_validator_length in tests:
        slash_indicator.setIndicators(validators, counts)
        tx = candidate_hub.cleanMock({'from': operator_address, 'value': 0})
        if len(validators) > 0:
            expect_event(tx, "indicatorCleaned", {})
        data = slash_indicator.getIndicators()

        _validators = data[0]
        _counts = data[1]

        for idx, _validator in enumerate(_validators):
            assert cleaned_validator[idx] == _validator
            assert cleaned_counts[idx] == _counts[idx]

        assert len(_validators) == cleaned_validator_length
